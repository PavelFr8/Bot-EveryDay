from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from sqlalchemy.ext.asyncio import AsyncSession

from bot.cbdata import MenuCallbackFactory
from bot.keyboards.notification_kb import get_default_notification_kb, get_back_kb, get_time_kb, get_done_kb
from bot.db.reqsts import get_data_by_id, get_users, save_data


notification_callback_router = Router()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
class GetNotification(StatesGroup):
    getting_name = State()
    getting_time = State()


# –ö–æ–ª–±—ç–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@notification_callback_router.callback_query(F.data == "back_notification")
@notification_callback_router.callback_query(MenuCallbackFactory.filter(F.action == "reminder"))
async def callback_reminder(
        callback: types.CallbackQuery,
        state: FSMContext
):
    await callback.message.edit_text(
        'üîî  –ù—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\\? *–ù–µ –ø—Ä–æ–±–ª–µ–º–∞\\!* \n\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, '
        '–∏ —è –ø—Ä–æ—Å–ª–µ–∂—É, —á—Ç–æ–±—ã –≤—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ\\. –í–∞—à –ª–∏—á–Ω—ã–π –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä *–≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π*\\!',
        parse_mode="MarkdownV2",
        reply_markup=get_default_notification_kb()
    )
    await state.clear()


# –ö–æ–ª–±—ç–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@notification_callback_router.callback_query(F.data == 'add_notification')
async def add_notification(
        callback: types.CallbackQuery,
        state: FSMContext):
    await callback.message.edit_text(
        "*–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\\!* üîî\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ*, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –¥–∞–ª—å—à–µ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è\\.\n\n"
        "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω_*",
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    fsm_data = await state.get_data()
    fsm_data["message"] = callback.message
    await state.set_data(fsm_data)
    await state.set_state(GetNotification.getting_name)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@notification_callback_router.message(GetNotification.getting_name)
async def add_deal(
        message: types.Message,
        state: FSMContext):
    fsm_data = await state.get_data()
    fsm_data["deals"] = None
    fsm_data["notifications"] = message.text
    old_message = fsm_data["message"]
    await state.set_data(fsm_data)
    await old_message.edit_text(
        "*–û—Ç–ª–∏—á–Ω–æ\\!* \n–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É\\!",
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    await message.answer(
        text='üîî  *–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*',
        parse_mode="MarkdownV2",
        reply_markup=get_time_kb()
    )
    await state.set_state(GetNotification.getting_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@notification_callback_router.message(GetNotification.getting_time)
async def add_deal(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession):
    fsm_data = await state.get_data()
    text = message.text.split('–ß–µ—Ä–µ–∑ ')[1][:2]
    if text == '1 ':
        text = '60'
    if text == '5 ':
        text = '05'
    fsm_data["notifications"] = text + fsm_data["notifications"]
    await save_data(session, message.from_user.id, fsm_data)
    await message.answer(
        text="*–û—Ç–ª–∏—á–Ω–æ\\!* \n–Ø –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\\!  üîî",
        parse_mode="MarkdownV2",
        reply_markup=get_done_kb()
    )
    await state.set_state(GetNotification.getting_time)