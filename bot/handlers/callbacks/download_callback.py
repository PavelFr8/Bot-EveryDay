from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import re
import logging

from bot.cbdata import MenuCallbackFactory
from bot.keyboards.download_kb import get_download_kb
from bot.keyboards.back_kb import get_back_kb
from bot.api.get_video import get_video

download_callback_router = Router()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
class GetUrl(StatesGroup):
    getting_url = State()


# –ö–æ–ª–±—ç–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
@download_callback_router.callback_query(StateFilter(None), MenuCallbackFactory.filter(F.action == "download"))
async def callbacks_download(
        callback: types.CallbackQuery,
        callback_data: MenuCallbackFactory,
        state: FSMContext
):
    await callback.message.edit_text(
        'üì• –•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\\? –û—Ç–ª–∏—á–Ω–æ\\! \n\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *—Å—Å—ã–ª–∫—É* –Ω–∞ –≤–∏–¥–µ–æ, '
        '–∏ —è –Ω–∞—á–Ω—É –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–∞—Å\\. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–∞—á–∞—Ç—å\\!\n\n',
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    await callback.answer()
    await state.set_state(GetUrl.getting_url)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
@download_callback_router.message(
    GetUrl.getting_url
)
async def video(
        message: types.Message,
        state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è URL
    if re.match(r'\bhttps?://\S+\.\S+\b', message.text):
        try:
            await state.update_data(url=message.text)
            user_data = await state.get_data()
            video_url = get_video(user_data['url'])
            logging.info(f'{user_data["url"]}')
            await message.answer(text="–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ! ‚ú®",
                                 reply_markup=get_download_kb(video_url))
            await state.clear()
        except Exception as e:
            await message.answer(
                text="–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ...",
                reply_markup=get_back_kb()
            )
            logging.error(f'Bot fail downloading video: {e}')
    else:
        await message.answer(
            text="–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É.",
            reply_markup=get_back_kb()
        )


@download_callback_router.callback_query(StateFilter(None), F.data == "download_more")
async def callbacks_more_video(
        callback: types.CallbackQuery,
        state: FSMContext
):
    await callback.message.edit_text(
        'üì• –í–∏–¥–µ–æ –º–Ω–æ–≥–æ –Ω–µ –±—ã–≤–∞–µ—Ç\\! \n\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *—Å—Å—ã–ª–∫—É* –Ω–∞ –≤–∏–¥–µ–æ, '
        '–∏ —è –Ω–∞—á–Ω—É –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤–∞—Å\\. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–∞—á–∞—Ç—å\\!\n\n',
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    await state.set_state(GetUrl.getting_url)
    await callback.answer()
