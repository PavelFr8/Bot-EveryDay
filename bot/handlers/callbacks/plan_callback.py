from datetime import datetime, timedelta
from pytz import utc


from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import AsyncSession

from cbdata import MenuCallbackFactory
from keyboards.plan_kbs import (get_plan_kb, get_default_plan_kb, get_create_plan_kb, get_back_kb, get_done_kb,
                                    get_schedule_kb)
from db.reqsts import get_data_by_id, save_data, get_users
from handlers.menu_handler import menu

plan_callback_router = Router()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
class GetPlan(StatesGroup):
    getting_plan = State()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
class GetDel(StatesGroup):
    choosing_wrong = State()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
class GetChanged(StatesGroup):
    choosing_changed = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def create_beautiful_plan(data: str):
    text = data.split("),(")
    back_text = ''
    for elem in text:
        if bool(int(elem[0])):
            back_text += "‚úÖ   " + f"<s>{elem[1:]}</s>" + '\n'
        else:
            back_text += "<b>‚Ä¢</b>  " + elem[1:] + '\n'
    return back_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ù–ï –í–´–ü–û–õ–ù–ï–ù–ù–´–• –∑–∞–¥–∞—á
def create_plan_for_schedules(data: str):
    text = data.split("),(")
    back_text = ''
    for elem in text:
        if bool(int(elem[0])):
            back_text += ''
        else:
            back_text += "<b>‚Ä¢</b>  " + elem[1:] + '\n'
    return back_text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
def create_enum_plan(data: str):
    text = data.split("),(")
    back_text = ''
    i = 1
    for elem in text:
        if bool(int(elem[0])):
            back_text += "‚úÖ   " + elem[1:] + f" - <b>{i}</b>" + '\n'
        else:
            back_text += "<b>‚Ä¢</b>  " + elem[1:] + f" - <b>{i}</b>" + '\n'
        i += 1
    return back_text


# –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@plan_callback_router.callback_query(F.data == 'done_deal')
@plan_callback_router.callback_query(F.data == 'back_deal')
@plan_callback_router.callback_query(MenuCallbackFactory.filter(F.action == "plan"))
async def callbacks_plan(
        callback: types.CallbackQuery,
        session: AsyncSession,
        state: FSMContext):
    data = await get_data_by_id(session, callback.from_user.id)
    if data.deals_list:
        deals_list = create_beautiful_plan(data.deals_list)
        await callback.message.edit_text(
            'üìÖ  <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!</b>\n\n'
            f'üñã –ê –≤–æ—Ç –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å <b>–ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>: \n{deals_list}',
            parse_mode="HTML",
            reply_markup=get_plan_kb()
        )
    else:
        await callback.message.edit_text(
            'üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É\\!* \n\n–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\\. '
            '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–ª–∞\\!',
            parse_mode="MarkdownV2",
            reply_markup=get_default_plan_kb()
        )
    await callback.answer()
    await state.clear()


# –ö–æ–ª–±—ç–∫ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å
@plan_callback_router.callback_query(F.data == 'create_plan')
async def create_plan(
        callback: types.CallbackQuery,
        state: FSMContext):
    await callback.message.edit_text(
        "*–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\\!* üìÖ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ*, –∞ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\\.\n\n"
        "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω_*",
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    await state.set_state(GetPlan.getting_plan)
    await callback.answer()


# –ö–æ–ª–±—ç–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
@plan_callback_router.callback_query(F.data == 'more_deals')
async def add_more_deals(
        callback: types.CallbackQuery,
        state: FSMContext):
    await callback.message.edit_text(
        "*–ó–∞–¥–∞—á –º–∞–ª–æ –Ω–µ –±—ã–≤–∞–µ—Ç\\!* ‚ö°Ô∏è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ*, –∞ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\\.\n\n"
        "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω_*",
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )
    await state.set_state(GetPlan.getting_plan)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
@plan_callback_router.message(GetPlan.getting_plan)
async def add_deal(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession):
    fsm_data = await state.get_data()
    fsm_data["deals"] = message.text
    fsm_data["notifications"] = ''
    await save_data(session, message.from_user.id, fsm_data)
    await message.answer(
        "*–û—Ç–ª–∏—á–Ω–æ\\!* \n–Ø –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å\\! ‚ö°Ô∏è",
        parse_mode="MarkdownV2",
        reply_markup=get_create_plan_kb()
    )
    await state.clear()


# –ö–æ–ª–±—ç–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@plan_callback_router.callback_query(F.data == 'del_deal')
async def del_deal(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession):
    data = await get_data_by_id(session, callback.from_user.id)
    enum_deals_list = create_enum_plan(data.deals_list)
    await callback.message.edit_text(
        "<b>–ó–∞–¥–∞—á –±—ã–≤–∞–µ—Ç –∏ –º–Ω–æ–≥–æ!</b> ‚ö°Ô∏è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–Ω–æ–º–µ—Ä</b> –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n\n"
        f"{enum_deals_list}",
        parse_mode="HTML",
        reply_markup=get_back_kb()
    )
    await state.set_state(GetDel.choosing_wrong)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@plan_callback_router.message(GetDel.choosing_wrong)
async def get_del_deal(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession):
    data = await get_data_by_id(session, message.from_user.id)
    data.deals_list = data.deals_list.split("),(")
    del data.deals_list[int(message.text) - 1]
    data.deals_list = "),(".join(data.deals_list)
    await session.commit()
    await message.answer(
        "*–û—Ç–ª–∏—á–Ω–æ\\!* \n–Ø —É–¥–∞–ª–∏–ª –ª–∏—à–Ω—é—é –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∞\\! ‚ö°Ô∏è",
        parse_mode="MarkdownV2",
        reply_markup=get_done_kb()
    )
    await state.clear()


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
@plan_callback_router.callback_query(F.data == 'change_deal')
async def change_deal(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession):
    data = await get_data_by_id(session, callback.from_user.id)
    enum_deals_list = create_enum_plan(data.deals_list)
    await callback.message.edit_text(
        "<b>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!</b> ‚ö°Ô∏è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>–Ω–æ–º–µ—Ä</b> –∑–∞–¥–∞—á–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n"
        f"{enum_deals_list}",
        parse_mode="HTML",
        reply_markup=get_back_kb()
    )
    await state.set_state(GetChanged.choosing_changed)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
@plan_callback_router.message(GetChanged.choosing_changed)
async def get_change_deal(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession):
    data = await get_data_by_id(session, message.from_user.id)
    data.deals_list = [(item[0], item[1:]) for item in data.deals_list.strip(")(").split("),(")]
    index = int(message.text) - 1
    deal = list(data.deals_list[index])
    deal[0] = '1' if deal[0] == '0' else '0'
    data.deals_list[index] = tuple(deal)
    data.deals_list = "),(".join(f"{state}{desc}" for state, desc in data.deals_list)
    await session.commit()
    data = await get_data_by_id(session, message.from_user.id)
    deals_list = create_beautiful_plan(data.deals_list)
    await message.answer(
        "<b>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!</b> ‚ö°Ô∏è\n\n"
        "–ê –≤–æ—Ç –∏ –≤–∞—à <b>–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π</b> –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å!.\n\n"
        f"{deals_list}",
        parse_mode="HTML",
        reply_markup=get_done_kb()
    )
    await state.clear()


# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
async def scheduled_task(session_factory, bot, scheduler):
    async with session_factory() as session:
        users = await get_users(session)
        for user in users:
            if user.deals_list and user.notifications_state:
                run_time = datetime.now(utc) + timedelta(hours=user.timezone)
                run_time = run_time.replace(hour=0, minute=0, second=0, microsecond=0)

                if datetime.now(utc) > run_time:
                    run_time += timedelta(days=1)

                scheduler.add_job(send_message, 'date', run_date=run_time, args=[bot, session, user.user_id])


# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
async def send_message(bot, session, chat_id):
    data = await get_data_by_id(session, chat_id)
    deals_list = create_plan_for_schedules(data.deals_list)
    await bot.send_message(chat_id,
                           f"<b>–°–µ–≥–æ–¥–Ω—è –≤—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏!</b> ‚ö°Ô∏è\n\n"
                           f"–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —è –º–æ–≥—É"
                           f" <b>–¥–æ–±–∞–≤–∏—Ç—å</b> –∏—Ö –≤ –ø–ª–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.\n\n"
                           f"<b>–í–æ—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:</b>\n  {deals_list}",
                           parse_mode='HTML',
                           reply_markup=get_schedule_kb())


# –ö–æ–ª–±—ç–∫ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
@plan_callback_router.callback_query(F.data == 'add_plan_schedule')
async def add_old_plan(
        callback: types.CallbackQuery,
        session: AsyncSession,
        state: FSMContext):
    data = await get_data_by_id(session, callback.from_user.id)
    text = data.deals_list.split("),(")
    back_text = ''
    for elem in text:
        if bool(int(elem[0])):
            pass
        else:
            back_text += elem + "),("
    back_text = back_text[:-3]
    data.deals_list = back_text
    await session.commit()
    await callback.answer()
    await menu(callback, state)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –æ—Ç–∫–∞–∑ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
@plan_callback_router.callback_query(F.data == 'del_plan_schedule')
async def add_old_plan(
        callback: types.CallbackQuery,
        session: AsyncSession,
        state: FSMContext):
    data = await get_data_by_id(session, callback.from_user.id)
    data.deals_list = ''
    await session.commit()
    await callback.answer()
    await menu(callback, state)
