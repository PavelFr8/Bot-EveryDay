from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy.ext.asyncio import AsyncSession
import re
import logging

from bot.cbdata import MenuCallbackFactory
from bot.keyboards.settings_kb import get_settings_kb, get_back_kb, get_done_kb
from bot.db.reqsts import get_data_by_id

settings_callback_router = Router()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
class GetTimezone(StatesGroup):
    getting_timezome = State()


# –ö–æ–ª–±—ç–∫ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@settings_callback_router.callback_query(F.data == 'back_to_settings')
@settings_callback_router.callback_query(MenuCallbackFactory.filter(F.action == "settings"))
async def callbacks_settings(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession
):
    data = await get_data_by_id(session, callback.from_user.id)
    await callback.message.edit_text(
        '‚öôÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\!*\n\n –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ '
        '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –≤–∞–º —Å—Ç–∞–ª–æ —É–¥–æ–±–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏\\.',
        parse_mode="MarkdownV2",
        reply_markup=get_settings_kb(data.notifications_state)
    )
    await state.clear()


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@settings_callback_router.callback_query(F.data == 'change_notf_state')
async def change_notification_state(
        callback: types.CallbackQuery,
        session: AsyncSession,
        state: FSMContext
):
    data = await get_data_by_id(session, callback.from_user.id)
    if data.notifications_state:
        data.notifications_state = False
    else:
        data.notifications_state = True
    await session.commit()
    await callbacks_settings(callback, state, session)


# –ö–æ–ª–±—ç–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
@settings_callback_router.callback_query(F.data == 'change_timezone')
async def change_timezone(
        callback: types.CallbackQuery,
        state: FSMContext,
        session: AsyncSession
):
    data = await get_data_by_id(session, callback.from_user.id)
    await state.set_state(GetTimezone.getting_timezome)
    await callback.message.edit_text(
        "*–î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\\!* üïë\n\n"
        f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: \\+{str(data.timezone)} UTC\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *—Å–æ–æ–±—â–µ–Ω–∏–µ*, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\\.\n"
        "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _\\+\\3_*",
        parse_mode="MarkdownV2",
        reply_markup=get_back_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
@settings_callback_router.message(GetTimezone.getting_timezome)
async def get_new_timezone(
        message: types.Message,
        state: FSMContext,
        session: AsyncSession
):
    try:
        new_timezone = int(str(message.text)[1:].strip())

        if 1 <= new_timezone <= 12:
            data = await get_data_by_id(session, message.from_user.id)
            data.timezone = new_timezone
            await session.commit()
            await state.clear()
            await message.answer(
                '*–û—Ç–ª–∏—á–Ω–æ, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω\\!* üïë\n'
                "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _\\+3_*",
                parse_mode="MarkdownV2",
                reply_markup=get_done_kb()
            )
        else:
            await message.answer(
                '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\\! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\!\n'
                "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _\\+3_*",
                parse_mode="MarkdownV2",
                reply_markup=get_back_kb()
            )

    except Exception:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\\! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\!\n'
            "*–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: _\\+3_*",
            parse_mode="MarkdownV2",
            reply_markup=get_back_kb()
        )
